//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Inputs/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Keyboard"",
            ""id"": ""af3853ab-c242-47fe-a88d-f051a8454c14"",
            ""actions"": [
                {
                    ""name"": ""MoveLR"",
                    ""type"": ""Value"",
                    ""id"": ""fe383696-8028-4e0d-9217-f92857395fba"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SoftDrop"",
                    ""type"": ""Button"",
                    ""id"": ""5f69149c-fc94-49e7-a342-f46eda38cce6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HardDrop"",
                    ""type"": ""Button"",
                    ""id"": ""04712101-503e-4c7c-9d38-af6c1aa03968"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateL"",
                    ""type"": ""Button"",
                    ""id"": ""2d6e58ac-2c53-4fe8-af43-65b050491ed4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateR"",
                    ""type"": ""Button"",
                    ""id"": ""07850e39-f859-48ef-9855-dc217df4fabc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""74635e3d-a2e6-4e70-9f85-62d896f68224"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1d75236-ef45-4ed4-ba2d-58c1ebd46aa8"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0a17cef-e8d4-47b7-8f79-4180a2f81c74"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SoftDrop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e09cafb1-0983-4983-9d40-561ab6f05f91"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HardDrop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78401e1b-006b-4bca-9ce7-a9b2ef0a0571"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateL"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dab40111-f13d-47e3-9655-f46f5b936d82"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_MoveLR = m_Keyboard.FindAction("MoveLR", throwIfNotFound: true);
        m_Keyboard_SoftDrop = m_Keyboard.FindAction("SoftDrop", throwIfNotFound: true);
        m_Keyboard_HardDrop = m_Keyboard.FindAction("HardDrop", throwIfNotFound: true);
        m_Keyboard_RotateL = m_Keyboard.FindAction("RotateL", throwIfNotFound: true);
        m_Keyboard_RotateR = m_Keyboard.FindAction("RotateR", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private List<IKeyboardActions> m_KeyboardActionsCallbackInterfaces = new List<IKeyboardActions>();
    private readonly InputAction m_Keyboard_MoveLR;
    private readonly InputAction m_Keyboard_SoftDrop;
    private readonly InputAction m_Keyboard_HardDrop;
    private readonly InputAction m_Keyboard_RotateL;
    private readonly InputAction m_Keyboard_RotateR;
    public struct KeyboardActions
    {
        private @GameInput m_Wrapper;
        public KeyboardActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveLR => m_Wrapper.m_Keyboard_MoveLR;
        public InputAction @SoftDrop => m_Wrapper.m_Keyboard_SoftDrop;
        public InputAction @HardDrop => m_Wrapper.m_Keyboard_HardDrop;
        public InputAction @RotateL => m_Wrapper.m_Keyboard_RotateL;
        public InputAction @RotateR => m_Wrapper.m_Keyboard_RotateR;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void AddCallbacks(IKeyboardActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Add(instance);
            @MoveLR.started += instance.OnMoveLR;
            @MoveLR.performed += instance.OnMoveLR;
            @MoveLR.canceled += instance.OnMoveLR;
            @SoftDrop.started += instance.OnSoftDrop;
            @SoftDrop.performed += instance.OnSoftDrop;
            @SoftDrop.canceled += instance.OnSoftDrop;
            @HardDrop.started += instance.OnHardDrop;
            @HardDrop.performed += instance.OnHardDrop;
            @HardDrop.canceled += instance.OnHardDrop;
            @RotateL.started += instance.OnRotateL;
            @RotateL.performed += instance.OnRotateL;
            @RotateL.canceled += instance.OnRotateL;
            @RotateR.started += instance.OnRotateR;
            @RotateR.performed += instance.OnRotateR;
            @RotateR.canceled += instance.OnRotateR;
        }

        private void UnregisterCallbacks(IKeyboardActions instance)
        {
            @MoveLR.started -= instance.OnMoveLR;
            @MoveLR.performed -= instance.OnMoveLR;
            @MoveLR.canceled -= instance.OnMoveLR;
            @SoftDrop.started -= instance.OnSoftDrop;
            @SoftDrop.performed -= instance.OnSoftDrop;
            @SoftDrop.canceled -= instance.OnSoftDrop;
            @HardDrop.started -= instance.OnHardDrop;
            @HardDrop.performed -= instance.OnHardDrop;
            @HardDrop.canceled -= instance.OnHardDrop;
            @RotateL.started -= instance.OnRotateL;
            @RotateL.performed -= instance.OnRotateL;
            @RotateL.canceled -= instance.OnRotateL;
            @RotateR.started -= instance.OnRotateR;
            @RotateR.performed -= instance.OnRotateR;
            @RotateR.canceled -= instance.OnRotateR;
        }

        public void RemoveCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyboardActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);
    public interface IKeyboardActions
    {
        void OnMoveLR(InputAction.CallbackContext context);
        void OnSoftDrop(InputAction.CallbackContext context);
        void OnHardDrop(InputAction.CallbackContext context);
        void OnRotateL(InputAction.CallbackContext context);
        void OnRotateR(InputAction.CallbackContext context);
    }
}
